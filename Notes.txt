TypeScript = JavaScript + TypeSafety

int x = 10;

x = "abc";

var x = 10;

x = 'abc';

x = true;

x = {};

x = function() {}

x = undefined;


function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number')
        throw new Error('Invalid arguments');
    return x + y;
}

function add(){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add.apply(this, n);
        return isNaN(n) ? 0 : parseInt(n, 10);
    }
    return arguments.length <= 1 ? parseArg(arguments[0]) : parseArg(arguments[0]) + add(Array.prototype.slice.call(arguments, 1));
}

add(10,20)
add(10, '20')
add(10, 'abc')
add([10,20],[30,40])
add([10,20],[30,'40'])
add([10,20],[30,'abc'])
add([10,20],[30,[40,'abc']])
add(function(){ return 10;}, function(){ return 20;});
add(function(){ return [10,20];}, function(){ return [30,[40,'abc']];});
add([function(){ return [10,20];}, function(){ return [30,[40,'abc']];}]);
add(function(){ return [function(){ return [10,20];}, function(){ return [30,[40,'abc']];}]; });
add(10)
add()
add(10,20,30,40,50)



var x : number = 100;

function add(x : number,y : number) : number {
    return x + y;
}

add(10,'20')

class Emp{

}
    |
    |
    V
    tsc
    |
    |
    V

var x  = 100;

function add(x ,y )  {
    return x + y;
}

function Emp(){

}



access modifier (private, public, protected)
classes
arrow functions
intefaces
enums
generics

decorators

typescript = superset of javascript


http://typescriptlang.org


Angualar
=========
Component
    Encapsulates Presentation (HTML & CSS) + UI Behavior + UI State
    Application = composition of components

Directive
    Dom Manipulations

Pipe
    Data transformation for presentation

Service
    Non UI concerns 

Module
    Registry of entities (components, directives, pipes, services) in the application
    Dependency Injection
    Application starting point is a Module
    There has to be a minimum of 1 module in the app


Framework X Library

@angular/cli

In Window
npm install @angular/cli  -g

In Mac
sudo npm install @angular/cli  -g

ES6 Modules
    Everything defined in a file (js/ts) is by default private
    Explicitly export any public entities
    Explicitly import what is required from the other module
    

Directives
    Attribute Directive
        Used to change the attributes of an existing DOM Node
        DO NOT change the structure of the dom tree (by adding / removing dom nodes)
        used with '[]'

    Structural Directive
        Change the structure of the dom tree by adding or removing dom nodes
        Used with '*'

falsy values in javascript
    0, '', null, NaN, undefined, false
truthy values in javascript
    everything other than the falsy values


Asynchronous Programming
    1. callback
    2. events
    3. promises
    4. async await
    5. generators
    6. observables ()


Observable X Enumerable 
    Enumerable = iterable with lazy evaluation (generator)

    Iterable?    

products (5000)
    id, name, cost, units, category

Find out the first 10 stationary products whose "value" is less than 100
    where "value" = cost * units

function filterStationaryProducts(products){
    .....
    return stationaryProducts;
}

function transformWithValue(products){
    .....
    return productsWithValue;
}

products
    .filter(p => p.category === 'stationary')
    .map(p => ({...p, value: p.cost * p.units}))
    .filter(pv => pv.value < 100)
    .first(10)

    30 J2EE Engineers from Bangalore
        with min of 5 years of experience.

    
3000 total 
    300 to be interviewed


Enumerable -> is a collection that already has the data
    filter
    map
    reduce
    forEach

Observable -> is a collection that will get the data in future across the time line one after Another
           -> Event Streams

    filter
    map
    scan
    forEach

Rx.NET ( Reactive Extensions ) (rxjs)

Mouse is a database

x,y,height, width, border size, border color, fill color, fill pattern

Event Driven Applications


Employee.csv
    id,name,email,doj,salary,address

Average Salary

open file
let count, sum
while (!eof){
    let line = file.readLine()
    let cols = line.parse()
    ++count;
    sum += cols['salary']
}
avg = sum /count;
close file


Browser
    User Actions (P)
    XHR
    Server Sent Events (P)
    Web Sockets (P)


Build steps for JS Applications
compile ts -> js
minify js
uglify js
bundle js
version js

compile scss -> css 
minify css
bundle css
version css

update the references of generated js and css files in the html page
minify html

create build folder
copy all the resources that need to be deployed




For production build
    ng build --prod

